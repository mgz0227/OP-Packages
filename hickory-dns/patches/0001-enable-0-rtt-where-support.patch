diff --git a/crates/proto/src/quic/quic_client_stream.rs b/crates/proto/src/quic/quic_client_stream.rs
index edc134e7..fe6fdfa0 100644
--- a/crates/proto/src/quic/quic_client_stream.rs
+++ b/crates/proto/src/quic/quic_client_stream.rs
@@ -266,7 +266,7 @@ pub(crate) async fn connect_quic(
     if crypto_config.alpn_protocols.is_empty() {
         crypto_config.alpn_protocols = vec![protocol.to_vec()];
     }
-    let early_data_enabled = crypto_config.enable_early_data;
+    let early_data_enabled = true;
 
     let mut client_config = ClientConfig::new(Arc::new(QuicClientConfig::try_from(crypto_config)?));
     client_config.transport_config(transport_config.clone());
diff --git a/crates/proto/src/rustls/tls_stream.rs b/crates/proto/src/rustls/tls_stream.rs
index 58aeea9f..60bd22b6 100644
--- a/crates/proto/src/rustls/tls_stream.rs
+++ b/crates/proto/src/rustls/tls_stream.rs
@@ -121,7 +121,7 @@ pub fn tls_connect_with_bind_addr<P: RuntimeProvider>(
     BufDnsStreamHandle,
 ) {
     let (message_sender, outbound_messages) = BufDnsStreamHandle::new(name_server);
-    let early_data_enabled = client_config.enable_early_data;
+    let early_data_enabled = true;
     let tls_connector = TlsConnector::from(client_config).early_data(early_data_enabled);
 
     // This set of futures collapses the next tcp socket into a stream which can be used for
@@ -169,7 +169,7 @@ where
     F: Future<Output = io::Result<S>> + Send + Unpin + 'static,
 {
     let (message_sender, outbound_messages) = BufDnsStreamHandle::new(name_server);
-    let early_data_enabled = client_config.enable_early_data;
+    let early_data_enabled = true;
     let tls_connector = TlsConnector::from(client_config).early_data(early_data_enabled);
 
     // This set of futures collapses the next tcp socket into a stream which can be used for
