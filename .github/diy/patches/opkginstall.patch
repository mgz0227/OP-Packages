--- a/luci-app-package-manager/htdocs/luci-static/resources/view/package-manager.js
+++ b/luci-app-package-manager/htdocs/luci-static/resources/view/package-manager.js
@@ -184,7 +184,7 @@ function parseList(s, dest)
 			val = RegExp.$2.trim();
 		}
 		else if (pkg) {
-			dest.pkgs[pkg.name] = pkg;
+			dest.pkgs[pkg.name] = dest.pkgs[pkg.name] ? dest.pkgs[pkg.name] : pkg;
 
 			var provides = dest.providers[pkg.name] ? [] : [ pkg.name ];
 
@@ -248,7 +248,7 @@ function display(pattern)
 			var avail = packages.available.pkgs[name],
 			    inst  = packages.installed.pkgs[name];
 
-			if (!inst || !inst.installed)
+			if (!inst || !inst.installed || pkg.name.includes('kmod-') || pkg.name.includes('busybox') || pkg.name.includes('base-files'))
 				continue;
 
 			if (!avail || compareVersion(avail.version, pkg.version) <= 0)
@@ -288,7 +288,7 @@ function display(pattern)
 					'data-action': 'install',
 					'click': handleInstall
 				}, _('Install‚Ä¶'));
-			else if (inst.installed && inst.version != pkg.version)
+			else if (inst.installed && compareVersion(pkg.version, inst.version) > 0)
 				btn = E('div', {
 					'class': 'btn cbi-button-positive',
 					'data-package': name,
@@ -790,7 +790,8 @@ function handleInstall(ev)
 						'id': 'overwrite-cb',
 						'type': 'checkbox',
 						'name': 'overwrite',
-						'disabled': isReadonlyView
+						'disabled': isReadonlyView,
+						'checked': true
 					}), ' ',
 					E('label', { 'for': 'overwrite-cb' }), ' ',
 					_('Allow overwriting conflicting package files')
@@ -1024,6 +1025,8 @@ function handlePkg(ev)
 			if (res.pkmcmd)
 				dlg.appendChild(E('pre', [ res.pkmcmd ]));
 
+			var showModalFlag = (cmd !== 'update' && pkg) || res.stderr;
+			if (showModalFlag) {
 			if (res.stdout)
 				dlg.appendChild(E('pre', [ res.stdout ]));
 
@@ -1051,6 +1054,10 @@ function handlePkg(ev)
 							resolveFn(res);
 					}, this, res)
 				}, _('Dismiss'))));
+				} else {
+				ui.hideModal();
+				updateLists();
+				}
 		}).catch(function(err) {
 			ui.addNotification(null, E('p', _('Unable to execute <em>%s %s</em> command: %s').format(L.hasSystemFeature('apk') ? 'apk' : 'opkg', cmd, err)));
 			ui.hideModal();
@@ -1145,6 +1152,42 @@ return view.extend({
 	},
 
 	render: function(listData) {
+		var checkUpdateNeeded = function() {
+            return Promise.all([
+                L.resolveDefault(fs.stat('/tmp/opkg-lists'), null),
+                L.resolveDefault(fs.list('/tmp/opkg-lists'), []),
+                L.resolveDefault(fs.read('/tmp/resolv.conf.d/resolv.conf.auto'), '')
+            ]).then(function(results) {
+                var stat = results[0];
+				var files = results[1];
+                var resolvContent = results[2];
+
+				var isEmpty = files.length === 0;
+                var needUpdate = false;
+
+                if (isEmpty) {
+                    needUpdate = true;
+                } else if (stat) {
+                    var currentDate = new Date();
+                    var lastUpdateDate = new Date(stat.mtime * 1000);  // Convert seconds to milliseconds
+                    // Ê£ÄÊü•ÊòØÂê¶Âú®‰ªäÂ§©ÁöÑÈõ∂ÁÇπ‰πãÂêéÊõ¥Êñ∞Ëøá
+                    var today = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
+                    needUpdate = lastUpdateDate < today;
+                } else {
+                    needUpdate = true;
+                }
+
+                // Ê£ÄÊü• resolv.conf.auto Êñá‰ª∂ÂÜÖÂÆπ
+                var hasResolvContent = resolvContent && resolvContent.trim().length > 0;
+
+                // Âè™ÊúâÂΩìÈúÄË¶ÅÊõ¥Êñ∞‰∏î resolv.conf.auto ‰∏ç‰∏∫Á©∫Êó∂ÔºåÊâçËøîÂõû true
+                return needUpdate && hasResolvContent;
+            }).catch(function(error) {
+                console.error('Error checking update status:', error);
+                return false; // Â¶ÇÊûúÂá∫ÈîôÔºå‰∏çÊâßË°åÊõ¥Êñ∞
+            });
+        };
+
 		var query = decodeURIComponent(L.toArray(location.search.match(/\bquery=([^=]+)\b/))[1] || '');
 
 		var view = E([], [
@@ -1186,6 +1229,7 @@ return view.extend({
 					E('label', {}, _('Actions') + ':'), ' ',
 					E('span', { 'class': 'control-group' }, [
 						E('button', { 'class': 'btn cbi-button-positive', 'data-command': 'update', 'click': handlePkg, 'disabled': isReadonlyView }, [ _('Update lists‚Ä¶') ]), ' ',
+						E('button', { 'class': 'btn cbi-button-negative', 'data-command': 'upgradeall', 'click': handlePkg, 'disabled': isReadonlyView }, [ _('Upgrade all‚Ä¶') ]), ' ',
 						E('button', { 'class': 'btn cbi-button-action', 'click': handleUpload, 'disabled': isReadonlyView }, [ _('Upload Package‚Ä¶') ]), ' ',
 						E('button', { 'class': 'btn cbi-button-neutral', 'click': handleConfig }, [ _('Configure %s').format(L.hasSystemFeature('apk') ? 'apk' : 'opkg') ])
 					])
@@ -1271,7 +1315,17 @@ return view.extend({
 		]);
 
 		requestAnimationFrame(function() {
-			updateLists(listData)
+			updateLists(listData);
+            checkUpdateNeeded().then(function(needUpdate) {
+                if (needUpdate) {
+		setTimeout(function() {
+                    var updateButton = document.querySelector('button[data-command="update"]');
+                    if (updateButton) {
+                        updateButton.click();
+                    }
+		}, 10)
+                }
+            });
 		});
 
 		return view;

--- a/luci-app-package-manager/root/usr/libexec/package-manager-call
+++ b/luci-app-package-manager/root/usr/libexec/package-manager-call
@@ -27,7 +27,7 @@ case "$action" in
 			find "${lists_dir:-/usr/lib/opkg/lists}" -type f '!' -name '*.sig' | xargs -r gzip -cd
 		fi
 	;;
-	install|update|upgrade|remove)
+	install|update|upgrade|upgradeall|remove)
 		(
 			cmd="$ipkg_bin"
 
@@ -89,10 +89,45 @@ case "$action" in
 
 			if flock -x 200; then
 				pkmcmd="$cmd $action $@"
-				$cmd $action "$@" </dev/null >/tmp/ipkg.out 2>/tmp/ipkg.err
-				code=$?
-				stdout=$(cat /tmp/ipkg.out)
+				if [ $action == "upgradeall" ]; then
+					$cmd update </dev/null >/tmp/ipkg.out 2>/tmp/ipkg.err
+					code=$?
+					if [ $code == 0 ]; then
+						. /etc/profile.d/opkg.sh
+						if [[ "$(cat `opkg export au`)" ]] && lock -n /var/lock/opkg-upgrade; then
+						 opkg upgr </dev/null >>/tmp/ipkg.out 2>>/tmp/ipkg.err
+						 code=$?
+						 lock -u /var/lock/opkg-upgrade
+						else
+							echo "üéâ ÊâÄÊúâËΩØ‰ª∂ÂåÖÂ∑≤ÊòØÊúÄÊñ∞~" >>/tmp/ipkg.out
+							code=0
+						fi
+					fi
+				else
+					$cmd $action "$@" </dev/null >/tmp/ipkg.out 2>/tmp/ipkg.err
+					code=$?
+				fi
+				pkgn="$(echo $@ | cut -d - -f 3-)"
+				case "$action" in
+					install|upgrade)
+					if [ "$(opkg list-installed | cut -f 1 -d ' ' | grep -w $@)" ]; then
+							rm -f /tmp/ipkg.err
+							([ -f /etc/profile.d/opkg.sh ] && . /etc/profile.d/opkg.sh && opkg save) &
+					fi
+					;;
+					remove)
+						if [ ! "$(opkg list-installed | cut -f 1 -d ' ' | grep -w $@)" ]; then
+							rm -f /tmp/ipkg.err
+							([ -f /etc/profile.d/opkg.sh ] && . /etc/profile.d/opkg.sh && opkg save) &
+						fi
+					;;
+				esac
 				stderr=$(cat /tmp/ipkg.err)
+				[ -n "$stderr" ] || {
+					echo "üéâ Â∑≤ÂÆåÊàê, ËØ∑ÂÖ≥Èó≠Êú¨Á™óÂè£~" >>/tmp/ipkg.out
+					code=0
+				}
+				stdout=$(cat /tmp/ipkg.out)
 			else
 				code=255
 				stderr="Failed to acquire lock"
@@ -110,7 +145,7 @@ case "$action" in
 	;;
 	*)
 		echo "Usage: $0 {list-installed|list-available|update}" >&2
-		echo "       $0 {install|upgrade|remove} pkg[ pkg...]" >&2
+		echo "       $0 {install|upgrade|upgradeall|remove} pkg[ pkg...]" >&2
 		exit 1
 	;;
 esac

--- a/luci-app-package-manager/root/usr/share/rpcd/acl.d/luci-app-package-manager.json
+++ b/luci-app-package-manager/root/usr/share/rpcd/acl.d/luci-app-package-manager.json
@@ -8,6 +8,7 @@
 				"/usr/libexec/package-manager-call list-available": [ "exec" ],
 				"/etc/opkg.conf": [ "read" ],
 				"/etc/opkg/*.conf": [ "read" ],
+				"/tmp/resolv.conf.d/resolv.conf.auto": [ "read" ],
 				"/etc/apk/repositories": [ "read" ],
 				"/etc/apk/repositories.d/distfeeds.list": [ "read" ],
 				"/etc/apk/repositories.d/customfeeds.list": [ "read" ]
@@ -24,6 +25,7 @@
 				"/usr/libexec/package-manager-call update": [ "exec" ],
 				"/usr/libexec/package-manager-call upgrade": [ "exec" ],
 				"/usr/libexec/package-manager-call upgrade *": [ "exec" ],
+				"/usr/libexec/package-manager-call upgradeall": [ "exec" ],
 				"/etc/opkg.conf": [ "write" ],
 				"/etc/opkg/*.conf": [ "write" ],
 				"/etc/apk/repositories": [ "write" ],

--- a/luci-mod-system/htdocs/luci-static/resources/view/system/flash.js
+++ b/luci-mod-system/htdocs/luci-static/resources/view/system/flash.js
@@ -261,6 +261,7 @@ return view.extend({
 					body.push(E('p', {}, E('label', { 'class': 'btn' }, [
 						opts.backup_pkgs[0], ' ', _('Include in backup a list of current installed packages at /etc/backup/installed_packages.txt')
 					])));
+					opts.backup_pkgs[0].checked = true;
 				};
 
 				var cntbtn = E('button', {
@@ -302,6 +303,10 @@ return view.extend({
 				opts.keep[0].addEventListener('change', function(ev) {
 					opts.skip_orig[0].disabled = !ev.target.checked;
 					opts.backup_pkgs[0].disabled = !ev.target.checked;
+					if (ev.target.checked == false){
+						opts.skip_orig[0].checked =false
+						opts.backup_pkgs[0].checked =false
+					}
 
 				});
 
