#!/bin/sh
. /usr/share/libubox/jshn.sh

############################################################################################
# Functions to parse AdGuardHome YAML file:
############################################################################################
parse_yaml() {
	local prefix=$2
	local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
	sed -ne "s|,$s\]$s\$|]|" \
		-e ":1;s|^\($s\)\($w\)$s:$s\[$s\(.*\)$s,$s\(.*\)$s\]|\1\2: [\3]\n\1  - \4|;t1" \
		-e "s|^\($s\)\($w\)$s:$s\[$s\(.*\)$s\]|\1\2:\n\1  - \3|;p" $1 | \
	sed -ne "s|,$s}$s\$|}|" \
		-e ":1;s|^\($s\)-$s{$s\(.*\)$s,$s\($w\)$s:$s\(.*\)$s}|\1- {\2}\n\1  \3: \4|;t1" \
		-e    "s|^\($s\)-$s{$s\(.*\)$s}|\1-\n\1  \2|;p" | \
	sed -ne "s|^\($s\):|\1|" \
		-e "s|^\($s\)-$s[\"']\(.*\)[\"']$s\$|\1$fs$fs\2|p" \
		-e "s|^\($s\)-$s\(.*\)$s\$|\1$fs$fs\2|p" \
		-e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
		-e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" | \
	awk -F$fs '{
	  indent = length($1)/2;
	  vname[indent] = $2;
	  for (i in vname) {if (i > indent) {delete vname[i]; idx[i]=0}}
	  if(length($2)== 0){  vname[indent]= ++idx[indent] };
	  if (length($3) > 0) {
		 vn=""; for (i=0; i<indent; i++) { vn=(vn)(vname[i])("_")}
		 printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, vname[indent], $3);
	  }
	}'
}
read_config() {
	if [ -f /etc/AdGuardHome.yaml ]; then
		parse_yaml /etc/AdGuardHome.yaml
	elif [ -f /etc/adguardhome.yaml ]; then
		parse_yaml /etc/adguardhome.yaml
	fi
}

############################################################################################
# Parse AGH yaml file and determine necessary variables in order to function:
############################################################################################
log_error()
{
	logger -p err "[luci.AdGuardHome]: $@"
}
check_if_empty()
{
	[[ ! -z "$2" ]] && return
	log_error $1
	echo "{\"auth_error\":\"$1\"}"
	exit 1
}
call_rest_api()
{
	AGH_USER=$(uci get adguardhome.config.web_username 2> /dev/null)
	check_if_empty "Username not found in uci adguardhome" ${AGH_USER} || exit 1
	AGH_PASS=$(uci get adguardhome.config.web_password 2> /dev/null)
	check_if_empty "Password not found in uci adguardhome" ${AGH_PASS} || exit 1
	CODE=$(curl --silent -L -k -u ${AGH_USER}:${AGH_PASS} ${PROTO}://${HOST}:${PORT}/control/$1 -o $TFILE -w "%{http_code"})
	if [[ "${CODE}" == "200" ]]; then
        cat $TFILE | tr -d '\n'
	else
		MSG="REST call failed with '$(cat ${TFILE})'. Are the credentials correct?"
		log_error "$MSG"
		echo "{\"error\":\"$MSG\"}" > ${TFILE}
	fi
}

############################################################################################
# Function that groups variables starting with specified string into a single JSON object: 
############################################################################################
group_vars() {
	local LOOK_FOR=${1/_1/}
	echo -n "\"$LOOK_FOR\":["
	cat ${TFILE} | grep "${LOOK_FOR}" | while read FOUND; do
		sed -i "/${FOUND%=*}/d" ${TFILE} 
		echo "${FOUND##*=}"
	done  | sed '$!s/$/,/' | tr -d '\n'
	echo -n "],"
}

############################################################################################
# Parse AGH yaml file and determine necessary variables in order to function:
############################################################################################
TFILE=/tmp/rpcd-adguardhome-$(date -Ins).tmp
trap 'rm ${TFILE}; exit' EXIT
read_config > ${TFILE}
source ${TFILE}
[[ "${tls_enabled}" == "false" ]] && PROTO="http" || PROTO="https"
[[ -z "${http_address}" ]] && http_address=${bind_host}:${bind_port}
HOST=${http_address%:*}
[[ "${HOST}" == "0.0.0.0" ]] && HOST=$(uci get system.@system[0].hostname).$(uci get dhcp.@dnsmasq[0].domain)
HOST=$(echo ${HOST} | awk '{print tolower($0)}')
PORT=${http_address##*:}

############################################################################################
# Decision-making cade:
############################################################################################
case "$1" in
	list)
		echo '{ "get_config": {}, "get_statistics": {}, "get_status": {}, "set_passwd": {"username":"string", "hash":"string"} }'
		;;
	call)
		case "$2" in
			get_config)
				# Start the JSON array:
				echo -n "{"
				# Group any variables starting with "dns_" together:
				grep "_1=\"" ${TFILE} | grep dns_ | while read LINE; do group_vars ${LINE%=*}; done
				# Return the AGH configuration as a JSON table: 
				cat ${TFILE} | sed "s|^|\"|g" | sed "s|=\"|\":\"|g" | sed "s|\"$|\",|g" | tr -d '\n'
				# Include web url, then close the JSON array:
				echo -n "\"bcrypt-tool\":\"$(whereis bcrypt-tool | awk '{print $2}')\","
				echo "\"web_url\":\"${PROTO}://${HOST}:${PORT}\"}"
				;;

			get_statistics)
				# Return the AGH statistics as a JSON table:
				call_rest_api stats
				;;

			get_status)
				# Return the AGH status as a JSON table:
				call_rest_api status
				;;

			set_passwd)
				# Check if bcrypt-tool is available for use:
				check_if_empty "bcrypt-tool is missing." "$(whereis bcrypt-tool)"
				# Read and load the argument into JSON array:  
				read input
				json_load "$input"
				# Get username and password from JSON array and verify they aren't empty: 
				json_get_var AGH_USER "username"
				check_if_empty "username parameter missing." "${AGH_USER}" || exit 1
				json_get_var AGH_HASH "hash"
				check_if_empty "hash parameter missing." "${AGH_HASH}" || exit 1
				# Change the username in the AGH configuration file:
				sed -i "s|\- name: .*|\- name: ${AGH_USER} |" /etc/adguardhome.yaml
				# Calculate and replace password hash in the AGH configuration file:
				sed -i "s|\password: .*|\password: ${AGH_HASH}|" /etc/adguardhome.yaml
				# Restart AdGaurdHome:
				service adguardhome restart
				# Return success to caller:  
				echo "{\"success\":true}"
				;;
		esac
		;;
esac
