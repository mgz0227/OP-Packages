#!/bin/sh /etc/rc.common

PROG=/usr/bin/AdGuardHome

USE_PROCD=1

# matches dnsmasq
START=19
# stops before networking stops
STOP=89

boot() {
  adguardhome_boot=1
  start "$@"
}

use_port53()
{
	[ "$1" != "53" ] && return
	sed -i '/dns:/,/^[^ ]/{ /[[:space:]]*port:/ s/port:[[:space:]]*[0-9]\+/port: 53/ }' $3
	uci set dhcp.@dnsmasq[0].port="$2"
	uci commit dhcp
	/etc/init.d/dnsmasq restart
}

rm_port53()
{
	[ "$1" != "53" ] && return
	sed -i '/dns:/,/^[^ ]/{ /[[:space:]]*port:/ s/port:[[:space:]]*[0-9]\+/port: '"$2"'/ }' $3
	uci -q set dhcp.@dnsmasq[0].port="53"
	uci commit dhcp
	/etc/init.d/dnsmasq restart
}

set_redirect()
{
	section=$(uci add firewall redirect)
	[ "$(uci -q get firewall.$section.dest_port)" = "$1" -o -z "$section" ] && return
	uci -q set firewall.$section.target="DNAT"
	uci -q set firewall.$section.name="AdGuard Home"
	uci -q set firewall.$section.src="lan"
	uci -q set firewall.$section.src_dport="53"
	uci -q set firewall.$section.dest_port="$1"
	uci commit firewall
	/etc/init.d/firewall reload
	echo "firewall rules updated."

}

clear_redirect()
{
	redirects=$(uci show firewall | grep "AdGuard Home" | awk -F".name" '{print $1}')
	[ -z "$redirects" ] && return
		for redirect in $redirects; do
			uci -q delete $redirect
			echo "deleted redirect rule: $redirect"
		done
		uci commit firewall
		/etc/init.d/firewall reload
		echo "firewall rules updated."

}

set_forward_dnsmasq()
{
	addr="127.0.0.1#$1"
	echo $2 | grep -q "^$addr" && return
	uci -q set dhcp.@dnsmasq[0].server=$addr
	uci -q delete dhcp.@dnsmasq[0].resolvfile
	uci set dhcp.@dnsmasq[0].noresolv=1
	uci commit dhcp
	/etc/init.d/dnsmasq restart
}


stop_forward_dnsmasq()
{
	addr="127.0.0.1#$1"
	echo $2 | grep -q "^$addr" || return
	uci -q delete dhcp.@dnsmasq[0].server
	uci -q delete dhcp.@dnsmasq[0].noresolv
	uci commit dhcp
	/etc/init.d/dnsmasq restart
}

start_service() {
  if [ -n "$adguardhome_boot" ]; then
    # Do not start yet, wait for triggers
    return 0
  fi

  config_load adguardhome
  config_get CONFIG_FILE config config "/etc/adguardhome.yaml"
  config_get PID_FILE config pidfile "/run/adguardhome.pid"
  config_get WORK_DIR config workdir "/var/lib/adguardhome"
  config_get REDIRECT config redirect "none"
  config_get_bool ENABLED config enabled 0
  AdGuardHome_PORT="$(awk '/dns:/{f=1} f&&/port:/{split($0,a,": *");print a[2];exit}' $CONFIG_FILE)"
  dnsmasq_port="$(uci -q get dhcp.@dnsmasq[0].port)"
  DNSMASQ_SERVER="$(uci -q get dhcp.@dnsmasq[0].server)"
  
  [ "$ENABLED" -eq 0 ] && return 1

  [ -d "$WORK_DIR" ] || mkdir -m 0755 -p "$WORK_DIR"

if [ "$REDIRECT" = "redirect" ]; then
		set_redirect $AdGuardHome_PORT
elif [ "$REDIRECT" = "dnsmasq-upstream" ]; then
		set_forward_dnsmasq $AdGuardHome_PORT $DNSMASQ_SERVER
elif [ "$REDIRECT" = "exchange" ]; then
	use_port53 $dnsmasq_port $AdGuardHome_PORT $CONFIG_FILE
fi

  procd_open_instance
  procd_set_param command "$PROG" -c "$CONFIG_FILE" -w "$WORK_DIR" --pidfile "$PID_FILE" --no-check-update
  procd_set_param stdout 1
  procd_set_param stderr 1
  procd_close_instance

}

stop_service() {
  if [ -n "$adguardhome_boot" ]; then
    # Do not start yet, wait for triggers
    return 0
  fi
  config_load adguardhome
  config_get CONFIG_FILE config config "/etc/adguardhome.yaml"
AdGuardHome_PORT="$(awk '/dns:/{f=1} f&&/port:/{split($0,a,": *");print a[2];exit}' $CONFIG_FILE)"
dnsmasq_port="$(uci -q get dhcp.@dnsmasq[0].port)"
DNSMASQ_SERVER="$(uci -q get dhcp.@dnsmasq[0].server)"
    rm_port53 $AdGuardHome_PORT $dnsmasq_port $CONFIG_FILE
    clear_redirect
    stop_forward_dnsmasq $AdGuardHome_PORT $DNSMASQ_SERVER
}

reload_service() {
	restart
}


service_triggers() {
  procd_add_reload_trigger "adguardhome"
  if [ -n "$adguardhome_boot" ]; then
    # Wait for interfaces to be up before starting AdGuard Home for real.
    # Prevents issues like https://github.com/openwrt/packages/issues/21868.
    procd_add_raw_trigger "interface.*.up" 5000 /etc/init.d/adguardhome restart
  fi
}
